{"meta":{"title":"ymy is watching u!!!!","subtitle":"","description":"Live my life with passion!","author":"ymy","url":"https://ymyforever.netlify.app","root":"/"},"pages":[{"title":"about","date":"2020-08-30T07:08:08.000Z","updated":"2022-08-14T02:05:40.811Z","comments":true,"path":"about/index.html","permalink":"https://ymyforever.netlify.app/about/index.html","excerpt":"","text":"DLUT计科到西交软院，计算机宇宙的小小探索者，请多指教~"},{"title":"tags","date":"2022-08-14T01:55:25.992Z","updated":"2022-08-14T01:55:25.992Z","comments":false,"path":"tags/index.html","permalink":"https://ymyforever.netlify.app/tags/index.html","excerpt":"","text":""},{"title":"aDream","date":"2020-09-15T02:32:56.000Z","updated":"2020-09-17T03:05:00.616Z","comments":true,"path":"secret/aDream.html","permalink":"https://ymyforever.netlify.app/secret/aDream.html","excerpt":"为什么会做这样的一场梦呢？ 为什么做了还让我醒来呢？ 这大概是我最不愿意醒来的梦吧。","text":"为什么会做这样的一场梦呢？ 为什么做了还让我醒来呢？ 这大概是我最不愿意醒来的梦吧。 求不得，求不得，求不得。 小的时候也做过这种怅然若失的梦，那个时候想要漂亮的文具，现在呢，想要完美的感情。 不过是想要得到偶像的认可罢了。 认可是自己给的，不要再傻了。 加油吧！ 最后，真好，我还有这一方自由乐园。"},{"title":"littletalk","date":"2020-09-14T03:58:28.000Z","updated":"2020-09-17T03:04:46.763Z","comments":true,"path":"secret/littletalk.html","permalink":"https://ymyforever.netlify.app/secret/littletalk.html","excerpt":"也许这就是偶像吧。每一次新的发现都能给我很大的精神震撼。 我一直以为庸人才应当在规则中生活，我这种疯子才应当指定规则。 人生短暂，我们来不及循规蹈矩。 我的生活永远与众不同。 这是多么狂妄自大的话啊，从我认识的其他任何一个人嘴里说出来都显得如此违和，只有你，你配得上这句话。","text":"也许这就是偶像吧。每一次新的发现都能给我很大的精神震撼。 我一直以为庸人才应当在规则中生活，我这种疯子才应当指定规则。 人生短暂，我们来不及循规蹈矩。 我的生活永远与众不同。 这是多么狂妄自大的话啊，从我认识的其他任何一个人嘴里说出来都显得如此违和，只有你，你配得上这句话。 我是一个在规则内循规蹈矩惯了的人，甚至利用规则谋求自己的利益。也是为了父母的规则，因为恐惧，恐惧父母得知女儿竟然和女生搅在一起时，那对我是灭顶之灾。 所以我选择了放弃，长痛不如短痛的放弃。我还爱吗？我告诉自己不爱了。 大学两年来，碌碌无为，既没有增长专业知识，也没有做出什么了不起的事情。我只是校园里千万颗齿轮里的一个，大齿轮，小齿轮，都是齿轮而已。 仰山之高，往往自惭形秽。可是功夫没到家，你没有资格。 对自己狠一点，再狠一点，你想要的，没人会给你，除了自己。 成为盖世英雄，而不要傻傻在原地等着。 你要的认可与肯定，只有自己能给你。 循此苦旅，循此苦旅。"}],"posts":[{"title":"论文阅读：Masked Autoencoders Enable Efficient Knowledge Distillers","slug":"论文阅读：Masked-Autoencoders-Enable-Efficient-Knowledge-Distillers","date":"2022-10-10T02:00:23.000Z","updated":"2022-10-11T03:39:58.271Z","comments":true,"path":"2022/10/10/论文阅读：Masked-Autoencoders-Enable-Efficient-Knowledge-Distillers/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AMasked-Autoencoders-Enable-Efficient-Knowledge-Distillers/","excerpt":"","text":"参考：https://mp.weixin.qq.com/s/q0Bq-R2ZD_lOmxdhW2qy1w Code：https://github.com/UCSC-VLAA/DMAE 论文简介 作者在MAE框架的基础上加入知识蒸馏技术，在MAE的预训练阶段进行特征对齐蒸馏，提出DMAE，探索了MAE从预训练模型中获取知识的能力。 （感觉这篇文章的意义就是把一个大的MAE，通过知识蒸馏，蒸馏到了一个小的MAE模型上，这个小的MAE模型取得了很好的效果QAQ） DMAE的整体框架如下图所示：","categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"},{"name":"知识蒸馏","slug":"知识蒸馏","permalink":"https://ymyforever.netlify.app/tags/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/"}]},{"title":"视频理解","slug":"视频理解","date":"2022-10-09T01:28:23.000Z","updated":"2022-10-15T01:46:46.560Z","comments":true,"path":"2022/10/09/视频理解/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/09/%E8%A7%86%E9%A2%91%E7%90%86%E8%A7%A3/","excerpt":"","text":"双流网络 论文：《Two-stream convolutional networks for action recognition in videos》 提出的具有两个分支的神经网络，将两个分支的输出融合后进行分类。 空间流神经网络：捕捉apperance信息，将视频帧作为处理对象，就是普通的图像处理网络，可以使用imagenet上的预训练网络。 时间流神经网络：捕捉两帧间光流的运动信息，一般将光流的运动信息分解为水平方向和竖直方向，如下图所示。对于L帧的视频，最终将得到L-1个光流图 光流图 对于从视频帧中得到的光流图，要利用光流图间的信息，作者提出了两种光流图叠加方式： optical flow stacking：直接将光流图对应位置叠加在一起，简单但没有充分利用光流信息 trajectory stacking：沿光流轨迹进行数值叠加（理论上有效，但实验效果不如1） Bi-directional optical flow： ​ 双向光流，在一个帧的前向和后向区间进行光流计算，达到双向传递的效果。 I3D 论文《Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset》 参考：https://www.bilibili.com/video/BV1tY4y1p7hq 这篇论文主要有两个贡献： 提出了I3D 提出了一个数据集Kinetics（类别均衡、规模适中、可玩性强，可作为视频任务的预训练数据集，地位相当于图片任务中的ImageNet） Inflated 3D Network 把一个2D模型直接扩张到3D，使用2D模型的参数去初始化3D模型。现在常说的I3D网络一般是指基于ResNet的3D网络。 对于视频动作识别任务，网络发展主要经过如下a,b,c,d四个阶段。其中e为作者在Kinetics数据集上提出的I3D网络。 作者提出这种网络的根据是，随着训练集规模的增大，使用3D CNN可以取得比2D CNN更好的效果，同时，使用光流信息，可以帮助模型取得更好的结果。 Inflating 2D ConvNets into 3D 2D Network &gt;&gt;&gt; 3D Network 保持2D网络的架构不变，直接将2D的卷积层、池化层等膨胀到3D（？实现了后向兼容），得到对应的3D神经网络架构。 tip：作者以及后人经过实验发现，最好不要做时间维度上的下采样。 Bootstrapping 3D Filters from 2D Filters 2D Model &gt;&gt;&gt; 3D Model 将2D模型的参数在时间维度上进行复制，即得到对应的3D模型。通过代码的实现如下所示： 12temporal_dim = weights3d[key3d].shape[2]inflated_2d = nd.broadcast_to(temporal_2d, shape=[0, 0, temporal_dim, 0, 0]) / temporal_dim 代码中除以temporal_dim的操作，是为了实现一个rescaling，使得对于分类任务，2D网络和3D网络的输出完全一致。 基于深度学习的视频动作识别综述 论文：《A Comprehensive Study of Deep Video Action Recognition》 参考：https://www.bilibili.com/video/BV1fL4y157yA 截至Video Transformer提出前，视频动作识别模型的发展历程如下图所示： Hand-crafted–&gt;CNN DeepVideo：没啥意思，通过一系列2D卷积操作，对视频进行分类。 双流网络 双流网络是在2D CNN基础上，添加一个处理光流的分支。针对初版双流网络的问题，主要在如下四个方面进行改进。 将late fusion改造为一种合适的early fusion； 把双流网络中使用的CNN网络进行变体，如融入之后提出的ResNet等； 双流网络的空间流和时间流分支是直接抽取特征后进行分类，可以换成RNN或LSTM等充分利用时序信息； 双流网络利用的是短时间内的视频信息，而一个动作往往持续时间较长，如何进行长视频的理解也是需要解决的问题。 ==双流网络目前仍存在的一个问题是，抽取光流的过程耗时巨大，在推理时，仍然需要花费较长时间去抽取光流，无法达到实时处理的要求（实时处理一般要求帧率达25fps）；另一方面，光流图的存储占据空间较多。== Beyond Short Snippets（引入LSTM） 提高特征提取使用的帧数 Conv Pooling： LSTM：带来的提升有限，可能是因为短时内语义信息没有显著变化，而LSTM只有在语义信息发生较大变化时作用显著。 Convolutional Fusion（使用early fusion） spatial fusion：在空间层面上对特征图进行fusion 在网络的哪个部分进行fusion temporal fusion：如何在时间轴维度上进行fusion TSN（Temporal Segment Networks，解决长视频理解问题） 将一个视频分成多个段，每个段分别送入双流网络（不同段的双流网络共享一组参数），将不同段在空间流输出的结果进行segmental consensus（共识），同样对时间流的输出结果进行相同计算，然后两个流的输出融合后，得到最终输出结果。 除此之外，这篇论文也提出了一些技巧： Cross Modality Pre-training：将空间流和时间流（即光流）输入看作多模态问题，使用ImageNet上训练的模型对光流分支进行初始化，需要对预训练模型进行一下改造（将原来3通道的卷积加权平均，应用到20个通道的光流输入上），这种思想与I3D之后使用的方法类似。 Partial BN：缓解BN在视频理解任务上的过拟合问题，在视频数据集上对预训练模型进行训练时，冻住除第一层外的所有BN层。 corner cropping：强制模型在边角位置进行裁剪 scale- jittering：通过改变输入的长宽比，增加输入的多样性 3D CNN 在双流网已经取得很好效果的时候，人们关注于3D CNN网络，旨在提高模型的速度，以达到实时的效果。 graph LR A[C3D]-->B[I3D] B-->C[Non-local] C-->D[R2+1D] D-->E[SlowFast] C3D（2015） C3D提出了类似于VGG的3D卷积神经网络，在sports 1million数据集上进行训练，该模型可以分为特征抽取和分类两部分，作者提供了训练好的特征抽取模型接口，使得C3D在视频理解领域流行起来。 I3D（2017） I3D的主要贡献包括如下两方面： 降低了视频理解模型的训练难度（将2D模型膨胀至3D） 提出了一个很好、很大的数据集 Non-local（2018） 使用自注意力机制替代LSTM，用在视频理解网络中，进行长距离建模。 Non-local模块与自注意力模块相近，只是扩展到了3D上，在时间和空间维度上进行自注意力计算，同样具有即插即用的性质。 R(2+1)D（2018） 作者做了大量的实验，探究视频理解任务中的网络结构。经过实验证明，使用R(2+1)D的结构，把3D卷积拆分成两个卷积，先在空间上做2D的卷积，再在时间上做1D的卷积。 R(2+1)D的具体拆分方法如下图所示：其中a表示正常的3D卷积，b表示R(2+1)D，Mi指特征投射操作，进行维度变化，使得R(2+1)D网络参数尽可能与3D网络保持一致，从而证明R(2+1)D网络的优越性。 该方法的有效性，可以从以下几个方面解释： relu操作增多，提高了模型的非线性学习能力 1D和2D网络比3D网络更容易训练与优化 SlowFast（2019） SlowFast借鉴了双流网络的思想，但并没有使用光流。 SlowFast网络的原理来自人体视觉细胞，用80%的细胞去捕捉慢的场景信息，用20%的细胞捕捉快的高频率的运动信息。对应到网络结构上，抽取低帧率图像输入到慢分支中（小输入大网络），抽取高帧率图像输出快分支中（大输入小网络），同时每组卷积层后都跟一个later connection， Video Transformer 将Transformer直接应用到视频理解领域，扩展到在时间和空间两个维度进行自注意力计算，计算成本极高，很难训练起来。因此人们通过对时间和空间注意力拆分的方式，降低计算成本的同时，尽可能提升模型性能。 Timesformer（2021） Timesformer比较了几种Video Transformer的实现方式。经过实验验证，T+S的实现取得了最好的效果。 S：即经典的用在图像处理上的ViT ST：暴力地在时间和空间两个维度计算注意力，但内存占用太大，难以实现 T+S：借鉴了R(2+1)D的思想，先在时间上计算自注意力，再在空间上计算自注意力 L+G：先在局部的小窗口计算自注意力，再在全局计算自注意力 T+W+H：只沿着特定的轴做attention， 以上几种方法进行可视化后如下图所示，其中蓝色的色块表示基准点，其它相同颜色的色块则表示用于同基准点计算attention。 L+G：其中黄色的色块表示计算local attention的色块，紫色的色块表示计算global attention的色块（为了降低计算量，global也缩小了范围） transformer未来方向 在视频理解领域，transformer大致有如下几个研究方向： 利用transformer长时间建模的能力，进行长视频理解 多模态学习 自监督学习","categories":[],"tags":[{"name":"视频理解","slug":"视频理解","permalink":"https://ymyforever.netlify.app/tags/%E8%A7%86%E9%A2%91%E7%90%86%E8%A7%A3/"}]},{"title":"论文阅读：Remote Photoplethysmograph Signal Measurement from Facial Videos Using Spatio-Temporal Networks","slug":"论文阅读：Remote-Photoplethysmograph-Signal-Measurement-from-Facial-Videos-Using-Spatio-Temporal-Networks","date":"2022-10-08T01:04:24.000Z","updated":"2022-10-10T11:09:27.866Z","comments":true,"path":"2022/10/08/论文阅读：Remote-Photoplethysmograph-Signal-Measurement-from-Facial-Videos-Using-Spatio-Temporal-Networks/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/08/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ARemote-Photoplethysmograph-Signal-Measurement-from-Facial-Videos-Using-Spatio-Temporal-Networks/","excerpt":"","text":"发表时间：2019 code：https://github.com/ZitongYu/PhysNet HRV：Heart Rate Variability，心率变异性，从更精细的角度描述心脏活动 AF：atrial fibrillatio，心房震颤 时空网络：主流的时空网络有两种，第一种是基于3D卷积的时空网络，第二种是基于RNN的神经网络（如LSTM等）。 简介 文章提出了一个深度时空网络PhysNet，用于从原始面部视频中重建精确的rPPG信号，包括每个时间位置与其对应的脉冲峰值，可以获得平均HR，以及HRV和IBIs信息，用于AF检测与情绪识别中。 研究现状 早期使用两阶段的方法，阶段1检测或跟踪面部以提取rPPG信号，阶段2通过频率分析估计对应的平均心率。但这种方法有两个缺点，1是自定义的面部区域是根据经验知识得到的，可能并非最佳的区域。2是该方法需要手工特征或过滤器，可能泛化能力弱并且丢失与心率相关的重要信息； 对于基于深度学习的心率检测方法，通常有如下几个缺点，1是将心率估计问题看作简单的一阶段回归问题，得到平均心率，而丢失了单个脉冲峰值信息，从而限制了在医学上的应用；2是使用的方法并非端到端的系统，仍然需要预处理或后处理步骤，引入了手工特征；3是使用的方法基于2D空间神经网络，没有考虑对rPPG测量重要的时间特征。 模型简介 文章提出的rPPG信号测量方法的框架如下图所示： 文章的主要贡献包括如下几点： 提出了第一个基于端到端的rPPG信号测量网络PhysNet，并将之前忽略的时间信息考虑进去； PhysNet在测量平均心率和HRV特征上都达到了很好的性能； PhysNet具有很好的泛化性 PhysNet PhysNet的结构如下图所示： 主流的时空网络有基于3DCNN和基于RNN两种，因此作者也提出了两种PhyNet。 3DCNN based PhysNet 采用一个3x3x3的卷积在空间域和时间域同时提取rPPG特征。 采用基于时间的encoder-decoder结构PhysNet-3DCNN-ED，可以更有效地利用时间信息，减少冗余与噪音。 RNN based PhysNet 首先使用2DCNN提取空间特征，然后使用基于RNN的模块实现空间特征在时域的传播 损失函数 使用负皮尔森相关系数作为损失函数，以最大化趋势相似度，最小化峰值定位误差。 实验设置 数据集 文章使用了两个数据集，使用OBF数据集进行训练与测试，使用MAHNOB-HCI数据集进行模型泛化能力的交叉验证。 OBF数据集：采集自100个健康的成人和6个患有心房震颤的病人，每个人有两个时长为5分钟的视频，每个视频包括其对应的ECG、呼吸、ppg信号，每个视频的分辨率为1920x2080，帧率为60fps。 MAHNOB-HCI数据集：采集自27个人的共527个视频，每个视频的分辨率为780x580，帧率为61fps。 训练设置 对于每一个视频，进行如下操作： 在第一帧中使用Viola-Jones面部检测器切割出面部区域，并在之后的帧中固定这个区域； 将面部图片正则化到128x128 将视频和对应的真实信号进行下采样，视频下采样至30fps，信号下采样至30HZ 使用Adam，lr=1e-4，epoch=15 测试设置 对于HR与HRV的评估，使用如下几个性能指标： SD（standard deviation）：标准差 RMSE（root mean square error）：均方根误差 R（Pearson’s correlation coefficien）：皮尔森相关系数 MAE（mean absolute error）：平均绝对误差 代码实现（UBFC版） 数据集UBFC-rPPG UBFC-rPPG：出自论文《Unsupervised skin tissue segmentation for remote photoplethysmography》 video：43个 time：2min 帧率：30fps 分辨率：640x480 ground truth：与视频同步的心率信号，对于ground truth，第一行是gtTrace，第二行是gtHR，第三行是gtTime。 K-交叉验证（但好像没用到） K-交叉验证是一种模型评估方法，指将原始数据均分成k组，轮流将每个子集数据分别作为验证集，其余k-1组子集数据作为训练集，这样将得到k个模型，用k个模型的平均性能作为模型的评价指标。 DataLoader PhysNet实现中，训练集和测试集是通过如下代码手动划分的： 1234if (test): self.vdPath_list = os.listdir(&quot;/data/maoguanhui/UBFC/&quot;)[30:42]else: self.vdPath_list = os.listdir(&quot;/data/maoguanhui/UBFC/&quot;)[:30] 之后，将每个视频划分为7个片段，每个片段包括160帧 123clip = idx % 7 # 第几个剪辑片段idx = int(idx / 7) # 第几个视频start_frame = 160 * clip 然后从ground truth中获取计算loss需要的信息，首先获取平均HR，用于计算师兄添加的fre_loss 123456clhr = list(data[1].split())clhr = [str.replace(&#x27;e&#x27;, &#x27;E&#x27;) for str in clhr]sumHR = 0.0for kj in range(start_frame, start_frame + 160): sumHR += float(clhr[kj])clip_average_HR = sumHR / 160 再获取PPG信号，用于计算皮尔森系数对应的rPPG loss。 12345Trace = []data = list(data[0].split())data = [str.replace(&#x27;e&#x27;, &#x27;E&#x27;) for str in data]for j in range(len(data)): Trace.append(float(data[j])) 网络结构 在PhysNet的网络实现中，有多种网络，文章中选择使用PhysNet_padding_ED_peak","categories":[],"tags":[{"name":"rPPG","slug":"rPPG","permalink":"https://ymyforever.netlify.app/tags/rPPG/"}]},{"title":"论文技巧","slug":"论文技巧","date":"2022-10-06T01:37:11.000Z","updated":"2022-10-08T13:23:36.555Z","comments":true,"path":"2022/10/06/论文技巧/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/06/%E8%AE%BA%E6%96%87%E6%8A%80%E5%B7%A7/","excerpt":"","text":"如何找研究想法 参考：https://www.bilibili.com/video/BV1qq4y1z7F2/ 打补丁法：针对新发表的论文中存在的问题打补丁（注意：若一篇文章已经是打补丁的文章，最好不要继续在其上继续打补丁。） 如何判断研究工作的价值 参考：https://www.bilibili.com/video/BV1oL411c7Us/ 好的研究工作应该：用有新意的方法，有效的解决一个研究问题 研究问题：与之相对的是工程问题 量化地来看，研究价值&#x3D;新意度x有效性x问题大小 论文写作 参考：https://www.bilibili.com/video/BV1hY411T7vy/ Research, Researchers, and Readers 论文可以看作想象中的对话，根据读者的知识储备决定写作内容与风格 Asking Questions, Finding Answers so what","categories":[],"tags":[{"name":"论文技巧","slug":"论文技巧","permalink":"https://ymyforever.netlify.app/tags/%E8%AE%BA%E6%96%87%E6%8A%80%E5%B7%A7/"}]},{"title":"论文阅读：Benchmarking Joint Face Spoofing and Forgery Detection with Visual and Physiological Cues","slug":"论文阅读：Benchmarking-Joint-Face-Spoofing-and-Forgery-Detection-with-Visual-and-Physiological-Cues","date":"2022-10-04T07:41:10.000Z","updated":"2022-10-06T01:19:55.823Z","comments":true,"path":"2022/10/04/论文阅读：Benchmarking-Joint-Face-Spoofing-and-Forgery-Detection-with-Visual-and-Physiological-Cues/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ABenchmarking-Joint-Face-Spoofing-and-Forgery-Detection-with-Visual-and-Physiological-Cues/","excerpt":"","text":"发表时间：2022 研究内容：基于视觉和生理线索的联合人脸欺骗和伪造检测标杆 FAS：Face Anti-Spoofing，活体检测 Face Forgery Detection：人脸伪造检测（Deepfake检测） 摘要目前大多数的活体检测和人脸伪造检测方法关注以下两个方面： 单模态的视觉外观或生理信号（rPPG信号） 分离FAS或人脸伪造检测的特征表示 但这两种方面存在如下问题： 单模态的外观和rPPG特征对于高保真的3D面罩或视频回放袭击来说相对脆弱。 对于FAS和人脸欺诈识别任务，有丰富的常用特征，可用于以多任务学习的方式设计一个FAS和人脸欺诈识别联合系统。 本文贡献： 建立了第一个活体检测和伪造识别的benchmark，该benchmark同时使用视觉外观和生理rPPG信号。 设计了一个双分支的生理网络，同时使用面部时空的rPPG信号和其对应的连续小波变换作为输入。加强了rPPG周期性的区别。 在进行多模态融合前，对视觉外观和rPPG特征实施a weighted batch and layer normalization，以消除模态偏差，提高融合效果。 研究发现，无论单模态还是多模态模型，通过在活体检测和人脸伪造检测两个任务上进行联合训练可以显著提高模型泛化能力。 引言基于rPPG或外观+rPPG的活体检测与人脸伪造识别技术还不成熟。主要包括如下两个原因： 由于外部干扰，时域rPPG信号的周期性识别受到限制（无法区分是真实的还是伪造的）。 由于模态偏差，外观与rPPG信号的直接融合会导致负效果。 相关工作Physiological rPPG based FAS：使用rPPG信号进行活体检测。主要包括如下几种做法： 考虑真实的面部和打印出的面部的心跳区别； 通过比较面部的rPPG信号和背景噪音判断是否为活体； 使用transformer架构提取全局的周期性的信息用于活体检测； 通过评分级融合结合外观和rPPG预测实现活体检测 Physiological rPPG based face forgery detection：使用rPPG信号进行伪造人脸识别，主要包括如下几种做法： 与活体检测类似，通过判断心率是否包含固定周期性模式； 从时间域和功率谱域提取rPPG信号的特征，描述时间一致性和空间相干性； 实现方法Joint Face Spoofing and Forgery Detection：联合训练两种任务 联合训练架构：在多任务训练中有如下三种设置方式： 联合训练采样策略 随机采样：每个batch中的数据从两任务的混合数据中随机采样（比例不定） 同步采样：每个batch中的数据来自两任务的数据各占一半 交替采样：每个SGD step轮流学习每个任务（即一个batch学习FAS，一个batch学习伪造人脸识别） 按任务采样：先学习一个任务（全部数据），再学习另一个任务。 Two-branch Physiological Network：同时使用面部时空的rPPG信号和其对应的连续小波变换作为输入。 文章使用的两分支的生理网络如下图所示，使用两个结构相同但参数不同的编码器获得时域、时频域特征，将两种特征拼接形成通用的rPPG特征，然后接一个二分类头进行预测，同时为了训练的稳定性，对于两个分支添加额外的二分类头，模型的Loss由上述三个头的loss组成。 MSTmap（Multi-scale Spatial-temporal map）：多尺度时空图，考虑局部和全局的生理信号。 WaveletMap：基于连续小波变换的时频图 Weighted Normalization for Appearance and rPPG Fusion：多模态融合 对于每个模态使用batch normalization和layer normalization，然后再将两个模态进行连接。如下所示： 结论未来研究方向： 探索多任务学习和多模态融合的策略 除了基于rPPG的颜色变化，利用面部运动的语义线索和上下文动态进行活体检测和伪造人脸识别。","categories":[],"tags":[{"name":"rPPG","slug":"rPPG","permalink":"https://ymyforever.netlify.app/tags/rPPG/"},{"name":"FAS","slug":"FAS","permalink":"https://ymyforever.netlify.app/tags/FAS/"}]},{"title":"论文阅读：MAE","slug":"论文阅读：MAE","date":"2022-10-03T03:18:57.000Z","updated":"2022-10-04T02:49:30.930Z","comments":true,"path":"2022/10/03/论文阅读：MAE/","link":"","permalink":"https://ymyforever.netlify.app/2022/10/03/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AMAE/","excerpt":"","text":"参考：https://www.bilibili.com/video/BV1sq4y1q77t/ 代码：https://github.com/facebookresearch/mae 模型概述MAE即Masked Autoencoders（其auto是指“自“的意思，而不是自动，指label也来自图片本身），可以看作CV版的Bert，基于ViT方法。 MAE的整体思路是将图片中的一些patches进行mask，然后对masked掉的patches进行预测。如下图所示： NLP与CV作者认为造成NLP与CV任务中masked autoencoding的不同，主要来自以下几个方面： 文本与图像的信息密度不同，文本是人为生成的，具有高语义和信息密度，而图像则具有大量的冗余信息 对于自编码器的解码器，CV任务需要还原的是语义层次比较低的像素信息（解码器更加复杂），而NLP任务需要还原的是语义层次比较高的文本信息（解码器简单） MAE具体实现 masking：将一张图片分成若干个patches，然后随机选取部分patches进行mask，仅保留少量的patches，以减少冗余信息。 MAE Encoder：采用完全和ViT相同的方法，对于被masked掉的patches，直接不输入Encoder。 MAE Decoder：解码器同样使用一个Transformer，对于所有patches，通过一个共享的、可以学到的向量来表示，对于每一个块要加上位置编码信息，解码器只有在预训练的时候需要使用。 Reconstruction target：对于解码器的输出通过一个线形层投影到对应的输出shape，使用MSE对被masked的patches计算loss。","categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"}]},{"title":"论文阅读：Deep Learning Methods for Remote Heart Rate Measurement: A Review and Future Research Agenda","slug":"论文阅读：Deep-Learning-Methods-for-Remote-Heart-Rate-Measurement-A-Review-and-Future-Research-Agenda","date":"2022-09-29T07:41:40.000Z","updated":"2022-09-30T08:03:03.350Z","comments":true,"path":"2022/09/29/论文阅读：Deep-Learning-Methods-for-Remote-Heart-Rate-Measurement-A-Review-and-Future-Research-Agenda/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/29/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeep-Learning-Methods-for-Remote-Heart-Rate-Measurement-A-Review-and-Future-Research-Agenda/","excerpt":"","text":"参考博客：https://blog.csdn.net/m0_46792836/article/details/121222265 简介rPPG，即remote photoplethysmography，远程光电容积脉搏波描记法，通过摄像头捕捉皮肤细微的亮度变化监测心率。 PPG是一种最常用的测量心率的方法，使用一个光源和光电探测器测量皮下血管体积的变化，当光源照在组织上时，光探测器可以捕捉到血液流动反射或透射光强度的微小变化，产生所谓的PPG信号，光的吸收遵循Beer–Lambert定律，该定律指出，血液吸收的光与光进入皮肤的渗透力和血液中血红蛋白的浓度成正比。在心动周期中，血红蛋白浓度的微小变化引起血管吸收的光量的32个波动，导致33个皮肤强度值的变化。 但对于穿戴式或接触式的监测设备，不适用于检测新生儿或皮肤脆弱的患者，长期检测可能会导致患者不舒服或皮肤感染。 在rPPG中，使用相机作为光探测器捕捉皮肤微小的颜色变化，自然光作为光源。其DRM（色反射）模型如下图所示，可以看到相机同时捕捉到皮肤表面产生的镜面反射和身体产生的漫反射，其中镜面反射并不包含有意义的生理信息，因此需要对捕捉到的信号进行精细处理。 传统的远程心率测量方法如下图所示，首先对视频进行人脸检测，接着从人脸上选择感兴趣的区域（ROI），以此获得包含强信号的区域，此后从ROI内的像素提取rPPG信号，最后对rPPG信号进一步处理（如频率分析和峰值检测等）获取心率信息。 基于深度学习的远程心率检测方法可以分为端到端和混合深度学习的方法。 端到端的深度学习方法所谓的端到端的方法，即模型直接将视频作为输入，产生心率或rPPG信号输出。这种方法需要大量的训练数据，同时训练结果难以验证，我们需要做更多的工作对模型进行解释。 端到端的心率检测方法又可以分为如下两种： 2D CNN2D CNN只考虑了视频帧的空间信息。 HR-CNN（2018）：包含提取器和HR估计器的两步CNN，提取器从视频帧序列中提取rPPG信号，使其信噪比最大化。HR-CNN解决了视频压缩伪影的问题。 DeepPhys（2018）：同时训练一个运动模型和外观模型，运动模型将相邻视频帧间的归一化差作为模型的输入表示，对帧中的运动和颜色变化进行建模；外观模型通过注意力机制引导运动模型学习运动表征。该模型可以更好地捕捉不同光照条件下的生理信号，对光照变化和被试运动更有鲁棒性。 MTTS-CAN（2020）：DeepPhys的改进，引入时间移位模块（TSM）捕获时间信息，TSM允许相邻帧之间的信息交换，避免昂贵的3D卷积操作。 时空网络——3D CNN3D CNN可以利用视频中包含的时间信息，时空网络（STNs）有效地表示视频流中生理信号的时空信息。 3D CNN PhysNet：旨在定位每个个体心跳的峰值，以准确估计被试的HR和HRV。 两阶段STN：包括一个时空视频增强网络（3D STVEN）和一个时空3D CNN（rPPGNet），压缩的面部视频通过3D STVEN以提高视频质量，同时保留尽可能多的信息；增强后的视频输入rPPGNet以提取rPPG信号，rPPGNet使用注意力机制从皮肤区域获取主导的rPPG特征。 AutoHR：使用神经结构搜索（NAS）自动找到最适合的主干3D CNN，使用一种三维卷积操作时域差分卷积（TDC）帮助跟踪感兴趣区域。 时空网络——2D CNN+RNN使用2D CNN提取空间信息，用RNN提取时间前后信息并结合。 基于RNN的PhysNet：首先将输入信息输入到2D CNN中提取RGB视频帧的空间特征，然后利用RNN在时域内传播这些空间特征。但研究证明，基于3D CNN的PhysNet比基于RNN的PhysNet获得了更好的性能。 混合深度学习方法所谓的混合深度学习方法，是指深度学习技术只应用在检测过程中的某些部分，如信号优化、信号提取或心率估计。 用于信号优化的深度学习方法所谓的信号优化就是使用人脸检测或皮肤分割，以忽略不相关的背景信息。 创建一个用于皮肤检测的2D CNN，用于分割出皮肤所在区域，对检测到的皮肤区域进行常规rPPG算法。但这种方法利用了人脸的所有皮肤区域提取rPPG信号，可能包含不必要的噪声。 Deep-HR：采用接受域块（RFB）网络对感兴趣区域进行目标检测，该方法设计了GAN增强检测到的ROI，对检测到的ROI进行再生，将这个高质量的ROI（这个过程也可以看作后面的信号提取的过程）用于后续的信号提取。 用于信号提取的深度学习信号提取的目标是从视频中提取高质量的rPPG信号进行HR估计（感觉是指去噪这个过程）。 LSTM：使用LSTM网络对噪声污染的rPPG信号进行滤波，得到无噪声的rPPG信号。由于数据不足的问题，在训练时可以首先在合成数据上进行训练，然后在真实数据集上微调。 2D CNN MetaPhys：使用预训练的2D CNN TS-CAN用于信号提取，并提出元学习方法，利用模型不可知元学习作为个性化参数更新模式，可以在只有少量训练样本的情况下快速适应。作者认为该方法可以减少由于肤色造成的偏差。 3D CNN Siamese-rPPG：基于Siamese 3D CNN框架，作者认为不同的面部区域应反映相同的rPPG特征，建立额头分支和脸颊分支进行特征提取，将两个分支的输出通过运算融合，得到最终的预测的rPPG信号。 3D CNN HeartTrack：利用带有注意力机制的3D CNN进行信号提取，在三维时空注意网络中，利用硬注意力机制忽略不相关的背景信息，利用软注意力机制过滤所覆盖的区域。再将提取到的信号送入1D CNN进行时间序列分析。 用于心率估计的深度学习对于提取到的rPPG信号，传统的方法是使用带通滤波器滤波，然后进行频率分析或峰值检测来估计心率。对于深度学习方法，将心率估计看作回归问题求解。 HR信号有两种表示： 频谱图像：对提取的rPPG信号进行短时傅里叶变换和带通滤波，得到频域表示，将频域表示和时域信号结合，形成频谱图像。 时空图：将ROI像素RGB通道的颜色信息串接在时间序列中，成行排列，形成时空地图。这种信号表示方法可以抑制与HR信号无关的信息。 应用场景 流行病控制 防伪：通过捕捉异常生物信号检测深度造假的视频 远程医疗 增强生物识别技术的安全性 驾驶状态检测 ？从自然灾害中寻找幸存者 新生儿检测 健康跟踪 研究缺口 影响因素：基于rPPG的远程HR测量收到光照变化、运动伪影、肤色变化和视频压缩等诸多因素的影响。新方法应提供如何从技术和生物物理角度处理这些挑战的见解 测量其他生命体征 数据集：目前数据集抓鱼用于解决运动伪影、照明变化，对于肤色变化、多人检测、远距离、新生儿检测也需要克服。 在不同HR范围上的表现 对基于深度学习方法上的理解","categories":[],"tags":[{"name":"rPPG","slug":"rPPG","permalink":"https://ymyforever.netlify.app/tags/rPPG/"}]},{"title":"经典模型：Video Swin Transformer","slug":"经典模型：Video-Swin-Transformer","date":"2022-09-28T11:10:10.000Z","updated":"2022-09-30T08:10:25.966Z","comments":true,"path":"2022/09/28/经典模型：Video-Swin-Transformer/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/28/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B%EF%BC%9AVideo-Swin-Transformer/","excerpt":"","text":"模型结构Video Swin Transformer的结构整体如下图所示，与Swin-T相比多了时间维度。 3D Patch Partition在初始时，设置每个token的大小为2x4x4x3，因此，每个视频被划分为$\\frac{T}{2}\\times \\frac{H}{4} \\times \\frac{W}{4}$个tokens，每个token的维度为96。 Linear Embedding将每一个token投影到指定的维度C。 Video Swin Transformer Block对于两个相邻的Video Swin Transformer Block，仍采用和Swin Transformer相同的处理方法，每个3D W-MSA后接一个3D SW-MSA。 3D W-MSA3D W-MSA与W-MSA相似，对于大小为8x8x8的输入，使用4x4x4的窗口大小，在stage1中窗口的数目为2x2x2，在每个窗口内部进行自注意力计算。 3D SW-MSA3D SW-MSA与SW-MSA相同，使用移动窗口补充计算不同窗口中token间的自注意力，为了降低移动窗口后增加的窗口数，同样使用拼接与mask技术，保持窗口数的恒定。 Patch Merging在进行patch合并时，不从时间维度进行下采样，而是从空间维度对2x2的patch进行合并，合并之后使用一个线性层投影将其维度减半。 实验结果不同的时空注意力设计 joint：在每一个3D窗口中联合计算时空注意力。 split：在空间swin transformer的基础上添加了两个时间transformer层 factorized：先是一个空间MSA层，再接一个时间MSA层。 实验证明，在视频分类任务中，综合考虑速度与精度，joint模式达到了最佳，作者认为空间域的局部性减少了joint的计算量，同时保持了有效性。 3D token的时间维度与窗口的时间维度总的来说，3D token的时间维度与窗口的时间维度越大，精度越高，相应的计算成本也越高。","categories":[],"tags":[{"name":"经典模型","slug":"经典模型","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B/"},{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"}]},{"title":"神经网络基础知识","slug":"神经网络基础知识","date":"2022-09-27T09:31:15.000Z","updated":"2022-10-06T01:25:36.842Z","comments":true,"path":"2022/09/27/神经网络基础知识/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/27/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"3D CNN参考博客： ​ https://blog.csdn.net/auto1993/article/details/70948249 ​ https://blog.csdn.net/YOULANSHENGMENG/article/details/121328554 使用3D CNN可以捕获视频中的时间和空间的特征信息。 Conv3D3D卷积：对于下面的采用3D卷积核进行的卷积操作，通过堆叠多个连续的帧组成一个立方体，在立方体中运用3D卷积核，卷积层中每一个特征map都与上一层中多个邻近的连续帧相连，以此捕捉运动信息。下图卷积操作的时间维度为3（对连续的三帧图像进行卷积操作）。 tip：3D卷积核只能从cube中提取一种类型的特征（在整个cube中卷积核的权值是共享的），若要提取多种特征，可以采用多种卷积核。 在pytorch中，同样有Conv3D的实现，使用样例如下： 12345678910111213141516import torchimport torch.nn as nn# Sample intput | 随机输入# (batch_size, channel, fram_size, height, width)net_input = torch.randn(32, 3, 10, 224, 224)# 所有维度同一个参数配置conv = nn.Conv3d(3, 64, kernel_size=3, stride=2, padding=1)net_output = conv(net_input)print(net_output.shape) # shape=[32, 64, 5, 112, 112] | 相当于每一个维度上的卷积核大小都是3，步长都是2，pad都是1# 每一维度不同参数配置conv = nn.Conv3d(3, 64, (2, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1))net_output = conv(net_input)print(net_output.shape) # shape=[32, 64, 9, 112, 112] 3D CNN","categories":[],"tags":[{"name":"神经网络基础知识","slug":"神经网络基础知识","permalink":"https://ymyforever.netlify.app/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"经典模型：Swin Transformer","slug":"经典模型：Swin-Transformer","date":"2022-09-26T11:08:46.000Z","updated":"2022-09-29T07:29:27.728Z","comments":true,"path":"2022/09/26/经典模型：Swin-Transformer/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/26/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B%EF%BC%9ASwin-Transformer/","excerpt":"","text":"模型结构与代码实现 参考博客：https://blog.csdn.net/qq_39478403/article/details/120042232?spm=1001.2014.3001.5506 code：https://github.com/microsoft/Swin-Transformer Swin（即Shifted Windows） Transformer可以作为CV的一种通用主干，用在分类、检测、语义分割等多种视觉任务上。 Swin Transformer的提出解决了ViT具有的以下两个问题： ViT中，由于每个token的size大小相同，难以捕捉多尺度信息。 ViT的自注意力计算复杂度是图像大小的二次方。 Swin-T构造了层次化特征图，并将自注意力的计算复杂度降为线性相关。 整体结构 Swin-T的整体架构如下图所示： Patch Partition 对于每个为H×W×3H \\times W \\times 3H×W×3的输入，划分为4×4×34 \\times 4 \\times 34×4×3大小的patch，每张图像被拆分为个patches，将每个patch展平作为一个token。 Linear Embedding 即一个全连接层，将每个大小为48的token映射到设定的维度C，此时，每张图片的输入变为了H4×W4×C\\frac{H}{4} \\times \\frac{W}{4} \\times C4H​×4W​×C，然后输入Swin Transformer Block。 123456789101112131415161718192021222324252627282930313233343536373839# Patch Partition + Linear Embeddingclass PatchEmbed(nn.Module): r&quot;&quot;&quot; Image to Patch Embedding Args: img_size (int): Image size. Default: 224. patch_size (int): Patch token size. Default: 4. in_chans (int): Number of input image channels. Default: 3. embed_dim (int): Number of linear projection output channels. Default: 96. norm_layer (nn.Module, optional): Normalization layer. Default: None &quot;&quot;&quot; def __init__(self, img_size=224, patch_size=4, in_chans=3, embed_dim=96, norm_layer=None): super().__init__() img_size = to_2tuple(img_size) patch_size = to_2tuple(patch_size) patches_resolution = [img_size[0] // patch_size[0], img_size[1] // patch_size[1]] self.img_size = img_size self.patch_size = patch_size self.patches_resolution = patches_resolution self.num_patches = patches_resolution[0] * patches_resolution[1] self.in_chans = in_chans self.embed_dim = embed_dim # 通过一个2维卷积实现patch partition与linear embedding self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size) if norm_layer is not None: self.norm = norm_layer(embed_dim) else: self.norm = None def forward(self, x): B, C, H, W = x.shape # FIXME look at relaxing size constraints assert H == self.img_size[0] and W == self.img_size[1], \\ f&quot;Input image size (&#123;H&#125;*&#123;W&#125;) doesn&#x27;t match model (&#123;self.img_size[0]&#125;*&#123;self.img_size[1]&#125;).&quot; x = self.proj(x).flatten(2).transpose(1, 2) # 先划分patch与投影，再展平与交换 if self.norm is not None: x = self.norm(x) return x Swin Transformer Block 对于Transformers中使用的全局自注意力机制，需要计算每个token与其它所有tokens间的关系，计算复杂度为token数的平方。不适用于对大量tokens进行密集预测或表示高分辨率图像等视觉问题。 W-MSA Swin-T通过在局部窗口中计算自注意力，将计算复杂度降低为token数的线性关系，设每个非重叠局部窗口中包含M×MM\\times MM×M个tokens。 MSA：有hwhwhw个tokens，每个token在全局计算hwhwhw次； W-MSA：有hwhwhw个tokens，每个token在全局计算M2M^2M2次。 首先将输入划分为若干个大小为MxM的窗口。 123456789101112def window_partition(x, window_size): &quot;&quot;&quot; Args: x: (B, H, W, C) window_size (int): window size Returns: windows: (num_windows*B, window_size, window_size, C) &quot;&quot;&quot; B, H, W, C = x.shape x = x.view(B, H // window_size, window_size, W // window_size, window_size, C) windows = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C) return windows SW-MSA W-MSA限制了跨窗口token间的交流与联系，从而限制了建模表征能力。作者提出了一种移位窗口划分方法SW-MSA，在模型中交替使用两种MSA方法（因此每个stage中Swin Transformer Block的数量都为偶数）。 所谓的移动窗口即将窗口循环位移，如下图所示： 但直接移位得到的窗口大小是不规则的，不利于并行计算，同时9个窗口也提升了计算成本。为了解决这个问题，将重新划分后的窗口进行拼接，如下图所示，得到4个窗口。 4个窗口中来自不同初始位置的patch不应进行自注意计算，因此使用mask机制，将不需要的注意力图置0。 W-MSA和SW-MSA公用一块代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980class WindowAttention(nn.Module): r&quot;&quot;&quot; Window based multi-head self attention (W-MSA) module with relative position bias. It supports both of shifted and non-shifted window. Args: dim (int): Number of input channels. window_size (tuple[int]): The height and width of the window. num_heads (int): Number of attention heads. qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0 proj_drop (float, optional): Dropout ratio of output. Default: 0.0 &quot;&quot;&quot; def __init__(self, dim, window_size, num_heads, qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0.): super().__init__() self.dim = dim self.window_size = window_size # Wh, Ww self.num_heads = num_heads head_dim = dim // num_heads self.scale = qk_scale or head_dim ** -0.5 # define a parameter table of relative position bias self.relative_position_bias_table = nn.Parameter( torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)) # 2*Wh-1 * 2*Ww-1, nH # get pair-wise relative position index for each token inside the window coords_h = torch.arange(self.window_size[0]) coords_w = torch.arange(self.window_size[1]) coords = torch.stack(torch.meshgrid([coords_h, coords_w])) # 2, Wh, Ww coords_flatten = torch.flatten(coords, 1) # 2, Wh*Ww relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :] # 2, Wh*Ww, Wh*Ww relative_coords = relative_coords.permute(1, 2, 0).contiguous() # Wh*Ww, Wh*Ww, 2 relative_coords[:, :, 0] += self.window_size[0] - 1 # shift to start from 0 relative_coords[:, :, 1] += self.window_size[1] - 1 relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1 relative_position_index = relative_coords.sum(-1) # Wh*Ww, Wh*Ww self.register_buffer(&quot;relative_position_index&quot;, relative_position_index) self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias) self.attn_drop = nn.Dropout(attn_drop) self.proj = nn.Linear(dim, dim) self.proj_drop = nn.Dropout(proj_drop) trunc_normal_(self.relative_position_bias_table, std=.02) self.softmax = nn.Softmax(dim=-1) def forward(self, x, mask=None): &quot;&quot;&quot; Args: x: input features with shape of (num_windows*B, N, C) mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None &quot;&quot;&quot; B_, N, C = x.shape qkv = self.qkv(x).reshape(B_, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4) q, k, v = qkv[0], qkv[1], qkv[2] # make torchscript happy (cannot use tensor as tuple) q = q * self.scale attn = (q @ k.transpose(-2, -1)) # 相对位置偏移 relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view( self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1) # Wh*Ww,Wh*Ww,nH relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous() # nH, Wh*Ww, Wh*Ww attn = attn + relative_position_bias.unsqueeze(0) # 判断是否需要mask if mask is not None: nW = mask.shape[0] attn = attn.view(B_ // nW, nW, self.num_heads, N, N) + mask.unsqueeze(1).unsqueeze(0) attn = attn.view(-1, self.num_heads, N, N) attn = self.softmax(attn) else: attn = self.softmax(attn) attn = self.attn_drop(attn) x = (attn @ v).transpose(1, 2).reshape(B_, N, C) x = self.proj(x) x = self.proj_drop(x) return x 相对位置偏置 在计算自注意力时，在计算相似度的过程中对每个head加入相对位置偏置，如下所示： 对于预训练中学到的相对位置偏置，可以通过双三次插值初始化具有不同窗口大小的微调模型。 Patch Merging Patch Merging层的功能是产生一个层次化表示，通过合并相邻的tokens，减少tokens的数目。 对于Stage1和Stage2间的Patch Merging层，将原维度为C的token合并为大小为4C的token，再使用一个线性层将输出维度降低为2C，token的数目降低为H8×W8\\frac{H}{8} \\times \\frac{W}{8}8H​×8W​。 在之后的每个stage中，都会改变张量的维度，从而形成一种层次化的特征。 12345678910111213141516171819202122232425262728293031323334353637class PatchMerging(nn.Module): r&quot;&quot;&quot; Patch Merging Layer. Args: input_resolution (tuple[int]): Resolution of input feature. dim (int): Number of input channels. norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm &quot;&quot;&quot; def __init__(self, input_resolution, dim, norm_layer=nn.LayerNorm): super().__init__() self.input_resolution = input_resolution self.dim = dim self.reduction = nn.Linear(4 * dim, 2 * dim, bias=False) self.norm = norm_layer(4 * dim) def forward(self, x): &quot;&quot;&quot; x: B, H*W, C &quot;&quot;&quot; H, W = self.input_resolution B, L, C = x.shape assert L == H * W, &quot;input feature has wrong size&quot; assert H % 2 == 0 and W % 2 == 0, f&quot;x size (&#123;H&#125;*&#123;W&#125;) are not even.&quot; x = x.view(B, H, W, C)# 把输入整形为BHWC x0 = x[:, 0::2, 0::2, :] # B H/2 W/2 C x1 = x[:, 1::2, 0::2, :] # B H/2 W/2 C x2 = x[:, 0::2, 1::2, :] # B H/2 W/2 C x3 = x[:, 1::2, 1::2, :] # B H/2 W/2 C x = torch.cat([x0, x1, x2, x3], -1) # B H/2 W/2 4*C x = x.view(B, -1, 4 * C) # B H/2*W/2 4*C x = self.norm(x) x = self.reduction(x)# 降低维度为原来的1/2 return x","categories":[],"tags":[{"name":"经典模型","slug":"经典模型","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B/"},{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"}]},{"title":"经典模型：Vision Transformer","slug":"经典模型：Vision-Transformer","date":"2022-09-26T00:32:10.000Z","updated":"2022-09-27T09:17:44.057Z","comments":true,"path":"2022/09/26/经典模型：Vision-Transformer/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/26/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B%EF%BC%9AVision-Transformer/","excerpt":"","text":"模型介绍 可参考博客：https://blog.csdn.net/qq_39478403/article/details/118704747 模型结构ViT主要使用Transformer的encoder部分 将一张图像分成若干个大小固定且相同的patch，将每个patch投影到线性空间中再加上位置编码 除了每个patch作为一个token外，在序列中添加一个额外的classification token 位置编码：（看下代码咋实现的） 使用可学习的一维位置编码（作者发现使用更高维的位置编码并没有带来显著的精度提升） 混合结构： 可以将原始图像使用CNN进行特征提取，将特征图按patch划分送入Transformer中。 实验设置ViT使用： ViT与Bert类似，先在大数据集上训练，再在downstream任务上微调。在微调时，将预训练用的预测头换成一个用0初始化的DxK的前馈层，其中K代表下游任务总的类别数。 在微调时，使用更高分辨率的图像可以获得更好的结果。（patch大小不变，输入序列变成，不影响网络结构），这样会导致之前训练得到的位置编码无意义，因此在原来的位置编码上进行一个2D的插值。 实验结果： 当考虑预训练的训练代价时，ViT以更低的代价达到了SOTA水平 在自监督问题上，ViT很有应用前景 代码实现 Official Code：https://github.com/google-research/vision_transformer timm code：https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/vision_transformer.py Patch Embeddings实现功能：将输入图像划分为若干个patch，并将每个patch拉平投影到D维。通过一个二维的卷积操作即可实现。 123456789101112131415161718192021222324252627282930313233343536# https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/patch_embed.pyclass PatchEmbed(nn.Module): &quot;&quot;&quot; 2D Image to Patch Embedding &quot;&quot;&quot; def __init__( self, img_size=224, patch_size=16,# 每个patch大小为16x16x3 in_chans=3, embed_dim=768,# 将patch映射到768维 norm_layer=None, flatten=True, bias=True, ): super().__init__() img_size = to_2tuple(img_size) patch_size = to_2tuple(patch_size) self.img_size = img_size self.patch_size = patch_size self.grid_size = (img_size[0] // patch_size[0], img_size[1] // patch_size[1]) self.num_patches = self.grid_size[0] * self.grid_size[1]# 每张图像对应patch个数 self.flatten = flatten # 通过一步卷积操作实现嵌入 self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size, bias=bias) self.norm = norm_layer(embed_dim) if norm_layer else nn.Identity() def forward(self, x): B, C, H, W = x.shape _assert(H == self.img_size[0], f&quot;Input image height (&#123;H&#125;) doesn&#x27;t match model (&#123;self.img_size[0]&#125;).&quot;) _assert(W == self.img_size[1], f&quot;Input image width (&#123;W&#125;) doesn&#x27;t match model (&#123;self.img_size[1]&#125;).&quot;) x = self.proj(x)# 投影 if self.flatten: x = x.flatten(2).transpose(1, 2) # BCHW -&gt; BNC x = self.norm(x) return x 可学习的嵌入 cls_token：为了与Bert保持一致，设置可学习的嵌入向量作为用于分类的类别向量。 pos_embed：由于自注意力机制具有扰动不变性（打乱tokens中的顺序并不会改变结果），因此需要位置编码标识位置信息。 1234567891011121314151617181920# cls_tokenself.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) if class_token else None# pos_embedembed_len = num_patches if no_embed_class else num_patches + self.num_prefix_tokensself.pos_embed = nn.Parameter(torch.randn(1, embed_len, embed_dim) * .02)def _pos_embed(self, x): if self.no_embed_class: # 先加位置编码再拼接cls_token # position embedding does not overlap with class token, add then concat x = x + self.pos_embed if self.cls_token is not None: x = torch.cat((self.cls_token.expand(x.shape[0], -1, -1), x), dim=1) else: # 先拼接cls_token再加位置编码 # pos_embed has entry for class token, concat then add if self.cls_token is not None: x = torch.cat((self.cls_token.expand(x.shape[0], -1, -1), x), dim=1) x = x + self.pos_embed return self.pos_drop(x) 多头注意力机制1234567891011121314151617181920212223242526class Attention(nn.Module): def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.): super().__init__() assert dim % num_heads == 0, &#x27;dim should be divisible by num_heads&#x27; self.num_heads = num_heads head_dim = dim // num_heads self.scale = head_dim ** -0.5 self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias) self.attn_drop = nn.Dropout(attn_drop) self.proj = nn.Linear(dim, dim) self.proj_drop = nn.Dropout(proj_drop) def forward(self, x): B, N, C = x.shape qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4) q, k, v = qkv.unbind(0) # make torchscript happy (cannot use tensor as tuple) attn = (q @ k.transpose(-2, -1)) * self.scale# QK attn = attn.softmax(dim=-1) attn = self.attn_drop(attn) x = (attn @ v).transpose(1, 2).reshape(B, N, C)# 乘以权重 x = self.proj(x) x = self.proj_drop(x) return x MLP1234567891011121314151617181920212223class Mlp(nn.Module): &quot;&quot;&quot; MLP as used in Vision Transformer, MLP-Mixer and related networks &quot;&quot;&quot; def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, bias=True, drop=0.): super().__init__() out_features = out_features or in_features hidden_features = hidden_features or in_features bias = to_2tuple(bias) drop_probs = to_2tuple(drop) self.fc1 = nn.Linear(in_features, hidden_features, bias=bias[0]) self.act = act_layer() self.drop1 = nn.Dropout(drop_probs[0]) self.fc2 = nn.Linear(hidden_features, out_features, bias=bias[1]) self.drop2 = nn.Dropout(drop_probs[1]) def forward(self, x): x = self.fc1(x) x = self.act(x) x = self.drop1(x) x = self.fc2(x) x = self.drop2(x) return Block实现功能：ViT的每个Block包括一层Attention和一层MLP。 12345678910111213141516171819202122232425262728293031class Block(nn.Module): def __init__( self, dim, num_heads, mlp_ratio=4., qkv_bias=False, drop=0., attn_drop=0., init_values=None, drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm ): super().__init__() self.norm1 = norm_layer(dim) self.attn = Attention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=drop) self.ls1 = LayerScale(dim, init_values=init_values) if init_values else nn.Identity() # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here self.drop_path1 = DropPath(drop_path) if drop_path &gt; 0. else nn.Identity() self.norm2 = norm_layer(dim) self.mlp = Mlp(in_features=dim, hidden_features=int(dim * mlp_ratio), act_layer=act_layer, drop=drop) self.ls2 = LayerScale(dim, init_values=init_values) if init_values else nn.Identity() self.drop_path2 = DropPath(drop_path) if drop_path &gt; 0. else nn.Identity() def forward(self, x): x = x + self.drop_path1(self.ls1(self.attn(self.norm1(x)))) x = x + self.drop_path2(self.ls2(self.mlp(self.norm2(x)))) return x","categories":[],"tags":[{"name":"经典模型","slug":"经典模型","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B/"},{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"}]},{"title":"论文阅读：Revisiting Pixel-Wise Supervision for Face Anti-Spoofing","slug":"论文阅读：Revisiting-Pixel-Wise-Supervision-for-Face-Anti-Spoofing","date":"2022-09-22T02:17:48.000Z","updated":"2022-09-22T03:25:46.440Z","comments":true,"path":"2022/09/22/论文阅读：Revisiting-Pixel-Wise-Supervision-for-Face-Anti-Spoofing/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ARevisiting-Pixel-Wise-Supervision-for-Face-Anti-Spoofing/","excerpt":"","text":"发表时间：2021 研究内容：像素级的人脸识别反欺诈方法 创新点：提出基于金字塔的监督方法，模型从多空间尺度上学习局部和全局的语义信息 Presentation Attack Detection研究历史： 传统算法关注于活体和手工特征的检测，需要丰富的任务级的先验知识。 活体检测：关注眨眼、面部和头部动作、视线追踪以及远程生理信号（这种方法需要长期的互动，容易被video attacks伪造）。 经典的handcrafted descriptors：从多种色彩空间中提取有效的欺诈模式，这种PA方法可以通过训练分类器捕捉，但在遇到未见过的场景或未知的PAs时就失效了。","categories":[],"tags":[{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"人脸识别","slug":"人脸识别","permalink":"https://ymyforever.netlify.app/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"}]},{"title":"论文阅读：Rethinking the ST-GCNs for 3D skeleton-based human action recognition","slug":"论文阅读：Rethinking-the-ST-GCNs-for-3D-skeleton-based-human-action-recognition","date":"2022-09-20T02:54:50.000Z","updated":"2022-09-22T02:18:47.677Z","comments":true,"path":"2022/09/20/论文阅读：Rethinking-the-ST-GCNs-for-3D-skeleton-based-human-action-recognition/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/20/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ARethinking-the-ST-GCNs-for-3D-skeleton-based-human-action-recognition/","excerpt":"","text":"发表时间：2021 ST-GCN：Spatial-Temporal Graph Convolutional Network，用于解决骨骼数据的动作识别问题。 研究内容： 证明了在ST-GCN中很多操作对于人体动作识别是没必要的 提出了一个简单有效的策略捕捉全局图的相关性，对输入序列进行有效建模，同时将输入图序列降入欧几里得空间，可以使用多尺度时域滤波器捕捉动态信息。 研究现状： 骨骼数据成为人体动作识别的主流输入（与传统的RGB视频数据相比，信息更完整） 直接将结构化的数据重新排列，使得tensor适应基础的神经网络（由于骨骼数据中没有天然的局部性概念，深度学习的能力受到限制） 设计一种适应结构化数据的自定义神经网络（ST-GCN） TBC：GCN好难，看不懂","categories":[],"tags":[{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"人体动作识别","slug":"人体动作识别","permalink":"https://ymyforever.netlify.app/tags/%E4%BA%BA%E4%BD%93%E5%8A%A8%E4%BD%9C%E8%AF%86%E5%88%AB/"},{"name":"GCN","slug":"GCN","permalink":"https://ymyforever.netlify.app/tags/GCN/"}]},{"title":"论文阅读：Social Distancing Alert with Smartwatches","slug":"论文阅读：Social-Distancing-Alert-with-Smartwatches","date":"2022-09-20T01:34:02.000Z","updated":"2022-09-20T02:49:35.605Z","comments":true,"path":"2022/09/20/论文阅读：Social-Distancing-Alert-with-Smartwatches/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/20/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ASocial-Distancing-Alert-with-Smartwatches/","excerpt":"","text":"发表时间：2022 研究内容：基于智能手表的社交距离警报系统SoDA，SoDA使用加速器和陀螺仪的数据和简单有效的视觉Transformer模型，识别违反社交距离的活动。 code：https://github.com/aiotgroup/SoDA 创新点： 应用价值 创建了一个数据集 证明了ViT是一种有效的方法？ 模型结构：","categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"},{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"}]},{"title":"论文阅读：PhysFormer: Facial Video-based Physiological Measurement with Temporal Difference Transformer","slug":"论文阅读：PhysFormer-Facial-Video-based-Physiological-Measurement-with-Temporal-Difference-Transformer","date":"2022-09-15T02:12:07.000Z","updated":"2022-10-04T02:47:21.189Z","comments":true,"path":"2022/09/15/论文阅读：PhysFormer-Facial-Video-based-Physiological-Measurement-with-Temporal-Difference-Transformer/","link":"","permalink":"https://ymyforever.netlify.app/2022/09/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9APhysFormer-Facial-Video-based-Physiological-Measurement-with-Temporal-Difference-Transformer/","excerpt":"","text":"发表时间：2021 研究对象：rPPG，使用多波长 RGB 相机检测人体皮肤表面脉冲引起的细微颜色变化，实现测量心脏活动和其它生理信号。 研究意义：传统的检测方法会造成discomfort，并且长期检测不方便 Code：https://github.com/ZitongYu/PhysFormer rPPG研究历史： 早期使用经典的信号处理方法检测面部细微的颜色变化； 使用非端到端方法，首先生成预处理的信号特征，然后模型从这些特征图中捕捉rPPG特征（对预处理要求严格，忽略了全局特征）； 端到端的基于深度学习的方法（容易被复杂的背景信息影响）。 研究现状： ​ 现有的基于卷积神经网络的模型在时间和空间上的感受野受限，忽略了长期的时间和空间上的互动与感知。 PhysFormer网络架构： Stem：由三个卷积块组成，用于提取粗糙的局部时空特征 12345678910111213141516171819202122232425262728# INPUT:[B,3,T,H,W]# OUTPUT:[B,D,T,H/8,W/8]# usex = self.Stem0(x)x = self.Stem1(x)x = self.Stem2(x) # [B, 64, 160, 64, 64]# implementself.Stem0 = nn.Sequential( nn.Conv3d(3, dim//4, [1, 5, 5], stride=1, padding=[0,2,2]), nn.BatchNorm3d(dim//4), nn.ReLU(inplace=True), nn.MaxPool3d((1, 2, 2), stride=(1, 2, 2)),)self.Stem1 = nn.Sequential( nn.Conv3d(dim//4, dim//2, [3, 3, 3], stride=1, padding=1), nn.BatchNorm3d(dim//2), nn.ReLU(inplace=True), nn.MaxPool3d((1, 2, 2), stride=(1, 2, 2)),)self.Stem2 = nn.Sequential( nn.Conv3d(dim//2, dim, [3, 3, 3], stride=1, padding=1), nn.BatchNorm3d(dim), nn.ReLU(inplace=True), nn.MaxPool3d((1, 2, 2), stride=(1, 2, 2)),) Tube Tokens：将stem输出划分为若干个时空tube token，将时空邻近语义聚合在一起，并减少后续transformer的计算量。通过一个3D卷积实现。 tip：在嵌入后没有额外加上位置编码，因为在stem里已经捕捉了相关的时空信息。 12345678# INPUT: # [B, 64, 160, 64, 64] ([B,D,T,H/8,W/8])# usex = self.patch_embedding(x) # [B, 64, 40, 4, 4]x = x.flatten(2).transpose(1, 2) # [B, 40*4*4, 64](B,N,D)# implement# Patch embedding [4x16x16]convself.patch_embedding = nn.Conv3d(dim, dim, kernel_size=(ft, fh, fw), stride=(ft, fh, fw)) Temporal Difference Multi-head Self-attention： 与传统的自注意力机制不同，使用TDC（Temporal Difference Convolution）查询Q和K的投影，可以捕捉局部细粒度的时间差异特征。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# 多头自注意力机制实现class MultiHeadedSelfAttention_TDC_gra_sharp(nn.Module): &quot;&quot;&quot;Multi-Headed Dot Product Attention with depth-wise Conv3d&quot;&quot;&quot; def __init__(self, dim, num_heads, dropout, theta): super().__init__() self.proj_q = nn.Sequential( CDC_T(dim, dim, 3, stride=1, padding=1, groups=1, bias=False, theta=theta), nn.BatchNorm3d(dim), #nn.ELU(), ) self.proj_k = nn.Sequential( CDC_T(dim, dim, 3, stride=1, padding=1, groups=1, bias=False, theta=theta), nn.BatchNorm3d(dim), #nn.ELU(), ) self.proj_v = nn.Sequential( nn.Conv3d(dim, dim, 1, stride=1, padding=0, groups=1, bias=False), #nn.BatchNorm3d(dim), #nn.ELU(), ) self.drop = nn.Dropout(dropout) self.n_heads = num_heads self.scores = None # for visualization def forward(self, x, gra_sharp): # [B, 4*4*40, 128] &quot;&quot;&quot; x, q(query), k(key), v(value) : (B(batch_size), S(seq_len), D(dim)) mask : (B(batch_size) x S(seq_len)) * split D(dim) into (H(n_heads), W(width of head)) ; D = H * W &quot;&quot;&quot; # (B, S, D) -proj-&gt; (B, S, D) -split-&gt; (B, S, H, W) -trans-&gt; (B, H, S, W) [B, P, C]=x.shape x = x.transpose(1, 2).view(B, C, P//16, 4, 4) # [B, dim, 40, 4, 4] q, k, v = self.proj_q(x), self.proj_k(x), self.proj_v(x)# 由CDC计算得到Q和K，3D卷积得到V q = q.flatten(2).transpose(1, 2) # [B, 4*4*40, dim] k = k.flatten(2).transpose(1, 2) # [B, 4*4*40, dim] v = v.flatten(2).transpose(1, 2) # [B, 4*4*40, dim] q, k, v = (split_last(x, (self.n_heads, -1)).transpose(1, 2) for x in [q, k, v]) # (B, H, S, W) @ (B, H, W, S) -&gt; (B, H, S, S) -softmax-&gt; (B, H, S, S) scores = q @ k.transpose(-2, -1) / gra_sharp# 矩阵相乘，计算得分（权重） # tip：在python里，“@”表示数学上的矩阵相乘，“*”表示矩阵对应位置两元素相乘 scores = self.drop(F.softmax(scores, dim=-1)) # (B, H, S, S) @ (B, H, S, W) -&gt; (B, H, S, W) -trans-&gt; (B, S, H, W) h = (scores @ v).transpose(1, 2).contiguous()# 计算结果 # -merge-&gt; (B, S, D) h = merge_last(h, 2) self.scores = scores return h, scores# TDCclass CDC_T(nn.Module): def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1, dilation=1, groups=1, bias=False, theta=0.6): super(CDC_T, self).__init__() self.conv = nn.Conv3d(in_channels, out_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, groups=groups, bias=bias) self.theta = theta def forward(self, x): out_normal = self.conv(x)# 正常3D卷积输出 if math.fabs(self.theta - 0.0) &lt; 1e-8: return out_normal else: # pdb.set_trace() [C_out, C_in, t, kernel_size, kernel_size] = self.conv.weight.shape # only CD works on temporal kernel size&gt;1 if self.conv.weight.shape[2] &gt; 1: kernel_diff = self.conv.weight[:, :, 0, :, :].sum(2).sum(2) + self.conv.weight[:, :, 2, :, :].sum(2).sum(2) kernel_diff = kernel_diff[:, :, None, None, None] # 时间差异项 out_diff = F.conv3d(input=x, weight=kernel_diff, bias=self.conv.bias, stride=self.conv.stride, padding=0, dilation=self.conv.dilation, groups=self.conv.groups) return out_normal - self.theta * out_diff else: return Spatio-temporal Feed-forward：在常用的两层线性transformation层之间，引入基于深度的3D卷积，ST-FF可以改善局部不一致性和部分噪声特征，同时丰富的局部性为TD-MHSA提供足够的相对位置信息，从而实现性能提升。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# use# Transformerself.transformer1 = Transformer_ST_TDC_gra_sharp(num_layers=num_layers//3, dim=dim, num_heads=num_heads, ff_dim=ff_dim, dropout=dropout_rate, theta=theta)# Transformerself.transformer2 = Transformer_ST_TDC_gra_sharp(num_layers=num_layers//3, dim=dim, num_heads=num_heads, ff_dim=ff_dim, dropout=dropout_rate, theta=theta)# Transformerself.transformer3 = Transformer_ST_TDC_gra_sharp(num_layers=num_layers//3, dim=dim, num_heads=num_heads, ff_dim=ff_dim, dropout=dropout_rate, theta=theta)class Transformer_ST_TDC_gra_sharp(nn.Module): &quot;&quot;&quot;Transformer with Self-Attentive Blocks&quot;&quot;&quot; def __init__(self, num_layers, dim, num_heads, ff_dim, dropout, theta): super().__init__() self.blocks = nn.ModuleList([ Block_ST_TDC_gra_sharp(dim, num_heads, ff_dim, dropout, theta) for _ in range(num_layers)]) def forward(self, x, gra_sharp): for block in self.blocks: x, Score = block(x, gra_sharp) return x, Scoreclass Block_ST_TDC_gra_sharp(nn.Module): &quot;&quot;&quot;Transformer Block&quot;&quot;&quot; def __init__(self, dim, num_heads, ff_dim, dropout, theta): super().__init__() self.attn = MultiHeadedSelfAttention_TDC_gra_sharp(dim, num_heads, dropout, theta) self.proj = nn.Linear(dim, dim) self.norm1 = nn.LayerNorm(dim, eps=1e-6) self.pwff = PositionWiseFeedForward_ST(dim, ff_dim)# ST-FF self.norm2 = nn.LayerNorm(dim, eps=1e-6) self.drop = nn.Dropout(dropout) def forward(self, x, gra_sharp): Atten, Score = self.attn(self.norm1(x), gra_sharp) h = self.drop(self.proj(Atten)) x = x + h h = self.drop(self.pwff(self.norm2(x))) x = x + h return x, Score # implementclass PositionWiseFeedForward_ST(nn.Module): &quot;&quot;&quot;FeedForward Neural Networks for each position&quot;&quot;&quot; def __init__(self, dim, ff_dim): super().__init__() self.fc1 = nn.Sequential( nn.Conv3d(dim, ff_dim, 1, stride=1, padding=0, bias=False), nn.BatchNorm3d(ff_dim), nn.ELU(), ) self.STConv = nn.Sequential( nn.Conv3d(ff_dim, ff_dim, 3, stride=1, padding=1, groups=ff_dim, bias=False), nn.BatchNorm3d(ff_dim), nn.ELU(), ) self.fc2 = nn.Sequential( nn.Conv3d(ff_dim, dim, 1, stride=1, padding=0, bias=False), nn.BatchNorm3d(dim), ) def forward(self, x): # [B, 4*4*40, 128] [B, P, C]=x.shape #x = x.transpose(1, 2).view(B, C, 40, 4, 4) # [B, dim, 40, 4, 4] x = x.transpose(1, 2).view(B, C, P//16, 4, 4) # [B, dim, 40, 4, 4] x = self.fc1(x) # x [B, ff_dim, 40, 4, 4] # 使用时空卷积 x = self.STConv(x) # x [B, ff_dim, 40, 4, 4] x = self.fc2(x) # x [B, dim, 40, 4, 4] x = x.flatten(2).transpose(1, 2) # [B, 4*4*40, dim] return x # (B, S, D) -&gt; (B, S, D_ff) -&gt; (B, S, D) #return self.fc2(F.gelu(self.fc1(x))) 创新点：PhysFormer，一种端到端的视频transformer，联合使用了局部的和全局的时空特征。 使用时差引导全局注意力机制，强化rPPG的周期性特征，针对干扰完善局部时空特征； 使用受label distribution learning和curriculum learning启发的频域动态约束，为PhysFormer提供详细的监督，缓解过拟合。 PhysFormer不需要像其它transformer网络那样在大规模数据集上预训练，仅在rPPG数据集训练即可。 Label Distribution Learning：对于面部的rPPG信号，心率相近的视频会有相似的周期性特征。为了使得模型学习到这种特征，将心率估计问题看作一个多分类问题，有多少个心率就有多少类别，类别概率向量由高斯分布组成。 Curriculum Learning Guided Dynamic Loss：课程式学习是指模型从容易样本开始学习，逐步学习困难样本。在该任务中，从时域和频域两个方面限制模型学习，时域的限制更直接更容易学习，频域的限制较难学习，因此，使用动态的loss函数，逐步提高频域loss的比例。 实验：不同模型的对比实验、消融实验 Others：注意力图可视化","categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"},{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"rPPG","slug":"rPPG","permalink":"https://ymyforever.netlify.app/tags/rPPG/"}]},{"title":"论文阅读：Model Behavior Preserving for Class-Incremental Learning","slug":"论文阅读：Model-Behavior-Preserving-for-Class-Incremental-Learning","date":"2022-08-23T02:45:11.000Z","updated":"2022-08-26T01:43:14.413Z","comments":true,"path":"2022/08/23/论文阅读：Model-Behavior-Preserving-for-Class-Incremental-Learning/","link":"","permalink":"https://ymyforever.netlify.app/2022/08/23/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AModel-Behavior-Preserving-for-Class-Incremental-Learning/","excerpt":"","text":"发表时间：2022 研究内容：类增量学习，探讨在增量学习中应保留旧模型的哪些功能性属性。 研究现状：现有的增量学习方法忽略了CNN模型响应间的内部结构，KD的硬约束导致新模型出现混沌行为。 创新点： Feature Space：设计了一个INP Loss保持成对实例在旧模型上的相似性顺序（反映实例集间的相邻关系）； INP用于惩罚新模型在学习过程中每个实例相邻关系的变化。 a. 旧实例A在特征空间中与其它实例的相邻关系； b. 采用传统的KD，引入新实例G后，绝对位置的微小变化被严格限制； c. 采用INP Loss当相对位置没变时，就不会限制更新。 Label Space：设计了一个LPP Loss在输出空间的实例标签概率向量中保留标签排名列表（反映实例属于每一类的排名）； 介绍了一种可导的排名计算方法用于计算上述Loss。","categories":[],"tags":[{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"连续学习","slug":"连续学习","permalink":"https://ymyforever.netlify.app/tags/%E8%BF%9E%E7%BB%AD%E5%AD%A6%E4%B9%A0/"}]},{"title":"论文阅读：Structural Knowledge Organization and Transfer for Class-Incremental Learning","slug":"论文阅读：Structural-Knowledge-Organization-and-Transfer-for-Class-Incremental-Learning","date":"2022-08-21T08:05:32.000Z","updated":"2022-08-23T02:20:35.961Z","comments":true,"path":"2022/08/21/论文阅读：Structural-Knowledge-Organization-and-Transfer-for-Class-Incremental-Learning/","link":"","permalink":"https://ymyforever.netlify.app/2022/08/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AStructural-Knowledge-Organization-and-Transfer-for-Class-Incremental-Learning/","excerpt":"","text":"发表时间：2021 研究问题：类增量学习 研究现状： 经典的知识蒸馏方法忽略了信息点之间的关联，当新数据远多于旧数据时，面临着严重的偏差问题； KD：在特征空间中，孤立地限制单个训练样本的位置，样本间的关系可能会被改变，并导致分类错误。 SGKD：保持样本的结构化知识，包括样本的位置和样本间关系，确保蒸馏后样本仍能被正确地分类。 创新点： 使用一个memory knowledge graph(MKG)表征历史任务的结构化知识 在特征空间中的绝对位置（MKG中用顶点表示已知example间的特征向量） example间对应关系（边表示，使用余弦距离） 使用图插值机制丰富知识域、缓解类间样本不平衡问题 通过向MKG中插入假的顶点，扩充和平滑分散的数据集，假顶点通过mix两个真顶点的vector得到。 使用结构化图知识蒸馏（SGKD）迁移旧知识 顶点蒸馏损失 边蒸馏损失 人脸识别是怎么实现增加新样本的？ 人脸识别网络的本质是一个特征提取器，并不是分类器，识别人脸的时候，通过计算输出特征和人脸库中人脸的距离判断人脸所属对象。未涉及类增量学习。","categories":[],"tags":[{"name":"论文阅读","slug":"论文阅读","permalink":"https://ymyforever.netlify.app/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"连续学习","slug":"连续学习","permalink":"https://ymyforever.netlify.app/tags/%E8%BF%9E%E7%BB%AD%E5%AD%A6%E4%B9%A0/"}]},{"title":"论文阅读：IDPT, Interconnected Dual Pyramid Transformer for Face Super-Resolution","slug":"论文阅读：IDPT","date":"2022-08-14T01:31:37.000Z","updated":"2022-09-19T03:43:55.484Z","comments":true,"path":"2022/08/14/论文阅读：IDPT/","link":"","permalink":"https://ymyforever.netlify.app/2022/08/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AIDPT/","excerpt":"","text":"研究问题：人脸超分辨率技术 FSR：关注于恢复重要的面部结构 创新点：提出了一个新的、有效的基于Transformer的人脸超分辨率架构 设计了金字塔结构的encode&#x2F;decoder的Transformer架构：分别提取粗糙纹理和精细纹理。 通过一个底部的金字塔特征提取器，将双重金字塔Transformer建立起联系。 在每个spatial layer插入一个新的融合调制模块：使用粗糙纹理完善对应的精细纹理，融合浅层的粗糙纹理和对应的深层的精细纹理。 FSR研究现状 现有技术在解决超低分辨率问题上表现很差 卷积难以描述不同域间的关联和捕捉远域间的依赖 网络结构：","categories":[],"tags":[{"name":"论文阅读","slug":"论文阅读","permalink":"https://ymyforever.netlify.app/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"FSR","slug":"FSR","permalink":"https://ymyforever.netlify.app/tags/FSR/"},{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"}]},{"title":"HelloWorld!","slug":"HelloWorld","date":"2020-08-29T08:06:44.000Z","updated":"2022-08-13T09:48:18.595Z","comments":true,"path":"2020/08/29/HelloWorld/","link":"","permalink":"https://ymyforever.netlify.app/2020/08/29/HelloWorld/","excerpt":"","text":"A new world!哈喽！历经一个下午博客终于搭建好了，原来是那么容易的一件事情，大一的时候想的很复杂，迟迟没能动手，现在也终于有了自己的小博客啦~ 未来灌水的文章还是会首先发在CSDN上，这里会分享一些重大的经历~已经大三了！要更努力学习！不要被些奇奇怪怪的事情干扰，奥里给！","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://ymyforever.netlify.app/tags/Transformer/"},{"name":"知识蒸馏","slug":"知识蒸馏","permalink":"https://ymyforever.netlify.app/tags/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/"},{"name":"视频理解","slug":"视频理解","permalink":"https://ymyforever.netlify.app/tags/%E8%A7%86%E9%A2%91%E7%90%86%E8%A7%A3/"},{"name":"rPPG","slug":"rPPG","permalink":"https://ymyforever.netlify.app/tags/rPPG/"},{"name":"论文技巧","slug":"论文技巧","permalink":"https://ymyforever.netlify.app/tags/%E8%AE%BA%E6%96%87%E6%8A%80%E5%B7%A7/"},{"name":"FAS","slug":"FAS","permalink":"https://ymyforever.netlify.app/tags/FAS/"},{"name":"经典模型","slug":"经典模型","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B/"},{"name":"神经网络基础知识","slug":"神经网络基础知识","permalink":"https://ymyforever.netlify.app/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"组内文章","slug":"组内文章","permalink":"https://ymyforever.netlify.app/tags/%E7%BB%84%E5%86%85%E6%96%87%E7%AB%A0/"},{"name":"人脸识别","slug":"人脸识别","permalink":"https://ymyforever.netlify.app/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"},{"name":"人体动作识别","slug":"人体动作识别","permalink":"https://ymyforever.netlify.app/tags/%E4%BA%BA%E4%BD%93%E5%8A%A8%E4%BD%9C%E8%AF%86%E5%88%AB/"},{"name":"GCN","slug":"GCN","permalink":"https://ymyforever.netlify.app/tags/GCN/"},{"name":"连续学习","slug":"连续学习","permalink":"https://ymyforever.netlify.app/tags/%E8%BF%9E%E7%BB%AD%E5%AD%A6%E4%B9%A0/"},{"name":"论文阅读","slug":"论文阅读","permalink":"https://ymyforever.netlify.app/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"FSR","slug":"FSR","permalink":"https://ymyforever.netlify.app/tags/FSR/"}]}